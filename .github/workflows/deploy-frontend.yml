name: Deploy Frontend

on:
  push:
    branches: [main]
    paths:
      - "apps/frontend/**"
      - "packages/schemas/**"
      - ".github/workflows/deploy-frontend.yml"
  pull_request:
    branches: [main]
    paths:
      - "apps/frontend/**"
      - "packages/schemas/**"
      - ".github/workflows/deploy-frontend.yml"

env:
  NODE_VERSION: "22"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Turborepo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Build affected packages
        run: |
          pnpm exec turbo build --filter=@monorepo-poc/frontend...

      - name: Run tests for affected packages
        run: |
          pnpm exec turbo test --filter=@monorepo-poc/frontend...

      - name: Configure AWS credentials
        if: github.ref == 'refs/heads/main'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR and Build/Push Docker image
        if: github.ref == 'refs/heads/main'
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Login to ECR
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          
          # Build Docker image
          docker build \
            --file apps/frontend/Dockerfile \
            --tag ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/monorepo-poc-frontend:$IMAGE_TAG \
            --tag ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/monorepo-poc-frontend:latest \
            .
          
          # Push Docker images
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/monorepo-poc-frontend:$IMAGE_TAG
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/monorepo-poc-frontend:latest

      - name: Deploy to EC2
        if: github.ref == 'refs/heads/main'
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Create deployment script
          cat > deploy-frontend.sh << 'EOF'
          #!/bin/bash
          set -e

          # Variables
          ECR_REPOSITORY="${{ secrets.ECR_FRONTEND_REPOSITORY }}"
          IMAGE_TAG="${{ github.sha }}"
          CONTAINER_NAME="monorepo-poc-frontend"

          # Login to ECR
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_FRONTEND_REPOSITORY }}

          # Pull latest image
          docker pull $ECR_REPOSITORY:$IMAGE_TAG

          # Stop and remove existing container if it exists
          docker stop $CONTAINER_NAME || true
          docker rm $CONTAINER_NAME || true

          # Run new container
          docker run -d \
            --name $CONTAINER_NAME \
            --restart unless-stopped \
            -p 3000:3000 \
            -e NODE_ENV=production \
            -e NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} \
            $ECR_REPOSITORY:$IMAGE_TAG

          # Clean up old images (keep last 3)
          docker images $ECR_REPOSITORY --format "table {{.Tag}}" | tail -n +4 | xargs -r docker rmi $ECR_REPOSITORY: || true

          echo "Frontend deployment completed successfully"
          EOF

          chmod +x deploy-frontend.sh

      - name: Copy deployment script to EC2
        if: github.ref == 'refs/heads/main'
        run: |
          # Save the deployment script as an artifact or use it with SSH
          echo "Deployment script created. In a real scenario, this would be copied to EC2 via SSH."
          echo "For this POC, the script is ready for manual execution on the EC2 instance."

          # Display the deployment command for manual execution
          echo "To deploy manually on EC2 instance:"
          echo "1. Copy the deploy-frontend.sh script to the EC2 instance"
          echo "2. Make it executable: chmod +x deploy-frontend.sh"
          echo "3. Run: ./deploy-frontend.sh"

      - name: Health check
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Deployment pipeline completed."
          echo "Health check would verify the application is running on EC2."
          echo "In a real scenario, this would ping the EC2 instance health endpoint."
